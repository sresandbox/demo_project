name: Deploy Flask Application

on:
  push:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint

      - name: Run pylint
        run: |
          if [ -f "app.py" ]; then
            pylint app.py
          else
            echo "No app.py found, skipping pylint."
          fi

  sonarqube:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          projectBaseDir: .
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  test:
    runs-on: ubuntu-latest
    needs: [lint, sonarqube]
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run unit tests with pytest
        run: |
          if [ -d "tests" ]; then
            pytest tests
          else
            echo "No tests directory found, skipping."
          fi

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build -t flask-demo-app .

      - name: Save Docker image
        run: docker save flask-demo-app -o flask-demo-app.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: flask-demo-app-image
          path: flask-demo-app.tar

  imagescan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: flask-demo-app-image

      - name: Load Docker image
        run: docker load -i flask-demo-app.tar

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: flask-demo-app
          format: "table"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"


  deploy:
    runs-on: ubuntu-latest
    needs: imagescan
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: flask-demo-app-image

      - name: Load Docker image
        run: docker load -i flask-demo-app.tar

      - name: Run Docker container
        run: |
          docker run -d -p 8080:8080 --name flask-demo-app flask-demo-app

      - name: Wait for Flask app to start
        run: sleep 10

      - name: Query API with GitHub user 'octocat'
        run: |
          curl -sSf http://localhost:8080/octocat | tee response.json

      - name: Notify deployment
        run: echo "Flask application deployed in Docker container!"